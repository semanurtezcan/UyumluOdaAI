from fastapi import FastAPI, HTTPException, Depends
from pydantic import BaseModel
import sqlite3
import joblib
import json
from fastapi.middleware.cors import CORSMiddleware
from typing import List

app = FastAPI()
origins = [
    "http://localhost",  # Yerel geliÅŸtirme iÃ§in
    "http://127.0.0.1",  # Veya https://yourfrontenddomain.com
    "http://localhost:8000",
]
# ğŸ“Œ CORS AyarlarÄ± (GÃ¼venlik iÃ§in belirli originleri tanÄ±mlayabilirsin)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ğŸ“Œ Ã–ÄŸrenci Veri Modeli
class Student(BaseModel):
    name: str
    personality_vector: List[float]  # Liste elemanlarÄ± float olarak belirlenmeli

class StudentRequest(BaseModel):
    student_id: int

# ğŸ“Œ VeritabanÄ± BaÄŸlantÄ±sÄ±
def create_connection():
    conn = sqlite3.connect("database.db")
    conn.row_factory = sqlite3.Row  # Verileri dictionary formatÄ±nda dÃ¶ndÃ¼rmek iÃ§in
    return conn

# ğŸ“Œ Modeli YÃ¼kleme Fonksiyonu
def load_model():
    try:
        model, student_clusters = joblib.load("room_match_model.pkl")
        return model, student_clusters
    except FileNotFoundError:
        return None, None

# ğŸ“Œ API Durumu KontrolÃ¼
@app.get("/")
def home():
    return {"message": "Oda eÅŸleÅŸtirme API'sine hoÅŸ geldiniz!"}

# ğŸ“Œ Ã–ÄŸrenci Ekleme API'si
@app.post("/register_student")
def register_student(student: Student):
    conn = create_connection()
    cursor = conn.cursor()
    
    # JSON formatÄ±na Ã§evir
    personality_vector_json = json.dumps(student.personality_vector)

    # VeritabanÄ±na ekleme
    try:
        cursor.execute(
            "INSERT INTO students (name, personality_vector) VALUES (?, ?)", 
            (student.name, personality_vector_json)
        )
        student_id = cursor.lastrowid  # Eklenen Ã¶ÄŸrencinin ID'sini al
        conn.commit()
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"VeritabanÄ± hatasÄ±: {str(e)}")
    finally:
        conn.close()

    return {"message": f"{student.name} baÅŸarÄ±yla eklendi!", "student_id": student_id}

# ğŸ“Œ Oda EÅŸleÅŸtirme API'si
@app.post("/match_room")
def match_room(data: StudentRequest):
    print(f"AlÄ±nan Ã¶ÄŸrenci ID: {data.student_id}")  # Log ekleyin
    student_id = data.student_id
    # Modeli yÃ¼kle
    model, student_clusters = load_model()
    if model is None:
        raise HTTPException(status_code=500, detail="Model bulunamadÄ±, Ã¶nce eÄŸitmelisin!")

    # Ã–ÄŸrencinin veritabanÄ±nda olup olmadÄ±ÄŸÄ±nÄ± kontrol et
    conn = create_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM students WHERE id = ?", (student_id,))
    student = cursor.fetchone()
    conn.close()

    if not student:
        raise HTTPException(status_code=404, detail="Ã–ÄŸrenci veritabanÄ±nda bulunamadÄ±")

    # EÄŸer Ã¶ÄŸrenci modele dahil edilmiÅŸse, ona uygun odalarÄ± dÃ¶ndÃ¼r
    if student_id in student_clusters:
        cluster = student_clusters[student_id]
        matching_students = [
            s_id for s_id, c in student_clusters.items() if c == cluster and s_id != student_id
        ]
        return {"student_id": student_id, "matching_students": matching_students}

    raise HTTPException(status_code=404, detail="Ã–ÄŸrenci modelde bulunamadÄ±")











































